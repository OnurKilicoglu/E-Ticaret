@model CartViewModel
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container py-5">
    <!-- Cart Header -->
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-6 fw-bold">
                <i class="bi bi-bag me-2"></i>Shopping Cart
            </h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
                    <li class="breadcrumb-item active">Shopping Cart</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (!Model.IsEmpty)
    {
        <div class="row g-4">
            <!-- Cart Items -->
            <div class="col-lg-8">
                <div class="card shadow-sm">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Cart Items (@Model.ItemCount items)</h5>
                        <button class="btn btn-outline-danger btn-sm" onclick="clearCart()">
                            <i class="bi bi-trash me-1"></i>Clear Cart
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Product</th>
                                        <th>Price</th>
                                        <th>Quantity</th>
                                        <th>Total</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Items)
                                    {
                                        <tr data-product-id="@item.ProductId">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <img src="@item.ImageUrl" alt="@item.ProductName" 
                                                         class="rounded me-3" style="width: 80px; height: 80px; object-fit: cover;"
                                                         onerror="this.src='/images/product-placeholder.jpg'" />
                                                    <div>
                                                        <h6 class="mb-1">
                                                            <a href="@item.ProductUrl" class="text-decoration-none">
                                                                @item.ProductName
                                                            </a>
                                                        </h6>
                                                        <div class="d-flex align-items-center gap-2">
                                                            <span class="badge bg-@item.StockBadgeClass">@item.StockStatus</span>
                                                            @if (item.HasDiscount)
                                                            {
                                                                <span class="badge bg-danger">
                                                                    Save @item.FormattedSavings
                                                                </span>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="align-middle">
                                                <div>
                                                    <strong class="text-primary">@item.FormattedPrice</strong>
                                                    @if (item.HasDiscount)
                                                    {
                                                        <div class="text-muted text-decoration-line-through small">
                                                            @item.FormattedOriginalPrice
                                                        </div>
                                                    }
                                                </div>
                                            </td>
                                            <td class="align-middle">
                                                <div class="input-group" style="max-width: 130px;">
                                                    <button class="btn btn-outline-secondary btn-sm" type="button" 
                                                            onclick="updateQuantity(@item.ProductId, @(item.Quantity - 1))">
                                                        <i class="bi bi-dash"></i>
                                                    </button>
                                                    <input type="number" class="form-control form-control-sm text-center" 
                                                           value="@item.Quantity" min="1" max="@item.MaxQuantity"
                                                           onchange="updateQuantity(@item.ProductId, this.value)" />
                                                    <button class="btn btn-outline-secondary btn-sm" type="button" 
                                                            onclick="updateQuantity(@item.ProductId, @(item.Quantity + 1))"
                                                            @(item.Quantity >= item.MaxQuantity ? "disabled" : "")>
                                                        <i class="bi bi-plus"></i>
                                                    </button>
                                                </div>
                                                @if (item.IsLowStock)
                                                {
                                                    <small class="text-warning">Limited stock</small>
                                                }
                                            </td>
                                            <td class="align-middle">
                                                <strong class="item-total">@item.FormattedTotal</strong>
                                            </td>
                                            <td class="align-middle">
                                                <button class="btn btn-outline-danger btn-sm" 
                                                        onclick="removeFromCart(@item.ProductId)"
                                                        title="Remove item">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Continue Shopping -->
                <div class="mt-3">
                    <a asp-controller="Catalog" asp-action="Index" class="btn btn-outline-primary">
                        <i class="bi bi-arrow-left me-2"></i>Continue Shopping
                    </a>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="col-lg-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-calculator me-2"></i>Order Summary
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal (@Model.ItemCount items):</span>
                            <span class="cart-subtotal">@Model.FormattedSubtotal</span>
                        </div>
                        
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping:</span>
                            <span class="@(Model.QualifiesForFreeShipping ? "text-success" : "")">
                                @if (Model.QualifiesForFreeShipping)
                                {
                                    <span>FREE</span>
                                }
                                else
                                {
                                    <span>@Model.FormattedShippingCost</span>
                                }
                            </span>
                        </div>

                        @if (!Model.QualifiesForFreeShipping)
                        {
                            <div class="alert alert-info p-2 small">
                                <i class="bi bi-info-circle me-1"></i>
                                Add @Model.AmountForFreeShipping.ToString("C") more for FREE shipping!
                            </div>
                        }

                        <div class="d-flex justify-content-between mb-2">
                            <span>Tax:</span>
                            <span class="cart-tax">@Model.FormattedTax</span>
                        </div>

                        <hr>

                        <div class="d-flex justify-content-between mb-3">
                            <strong>Total:</strong>
                            <strong class="text-primary cart-total fs-5">@Model.FormattedTotal</strong>
                        </div>

                        <div class="d-grid gap-2">
                            <a asp-action="Checkout" class="btn btn-primary btn-lg">
                                <i class="bi bi-lock me-2"></i>Proceed to Checkout
                            </a>
                            <button class="btn btn-outline-secondary" disabled>
                                <i class="bi bi-paypal me-2"></i>PayPal Checkout
                                <small class="d-block">Coming Soon</small>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Security Info -->
                <div class="card mt-3 border-0 bg-light">
                    <div class="card-body text-center p-3">
                        <i class="bi bi-shield-check display-6 text-success mb-2"></i>
                        <h6>Secure Checkout</h6>
                        <small class="text-muted">
                            Your payment information is protected with 256-bit SSL encryption
                        </small>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Empty Cart -->
        <div class="row">
            <div class="col-12">
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-bag-x display-1 text-muted"></i>
                    </div>
                    <h3 class="text-muted mb-3">Your cart is empty</h3>
                    <p class="text-muted mb-4">
                        Looks like you haven't added any items to your cart yet. 
                        Start shopping to fill it up!
                    </p>
                    <a asp-controller="Catalog" asp-action="Index" class="btn btn-primary btn-lg">
                        <i class="bi bi-bag-plus me-2"></i>Start Shopping
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Update cart item quantity
        function updateQuantity(productId, quantity) {
            quantity = parseInt(quantity);
            
            if (quantity < 0) return;
            
            fetch('/cart/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: quantity
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (quantity === 0) {
                        // Remove the row if quantity is 0
                        location.reload();
                    } else {
                        // Update cart count in header
                        updateCartCount(data.cartCount);
                        
                        // Update totals (you could implement partial updates here)
                        location.reload();
                    }
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to update cart item', 'error');
            });
        }

        // Remove item from cart
        function removeFromCart(productId) {
            if (!confirm('Are you sure you want to remove this item from your cart?')) {
                return;
            }

            fetch('/cart/remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({
                    productId: productId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCartCount(data.cartCount);
                    location.reload();
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to remove item from cart', 'error');
            });
        }

        // Clear entire cart
        function clearCart() {
            if (!confirm('Are you sure you want to clear your entire cart?')) {
                return;
            }

            fetch('/cart/clear', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCartCount(0);
                    location.reload();
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to clear cart', 'error');
            });
        }

        // Update cart count in header
        function updateCartCount(count) {
            $('.cart-count').text(count);
        }

        // Show toast notification
        function showToast(title, message, type) {
            // Simple alert for now - you could implement a proper toast system
            alert(message);
        }
    </script>
}
