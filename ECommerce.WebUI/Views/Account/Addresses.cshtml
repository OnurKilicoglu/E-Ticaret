@model ECommerce.WebUI.Models.AddressesViewModel

@{
    ViewData["Title"] = "My Addresses";
}

<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="bg-light py-2">
    <div class="container">
        <ol class="breadcrumb mb-0">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-controller="Account" asp-action="Profile">My Account</a></li>
            <li class="breadcrumb-item active" aria-current="page">Addresses</li>
        </ol>
    </div>
</nav>

<div class="container my-5">
    <div class="row">
        <!-- Account Sidebar -->
        <div class="col-lg-3 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-person-circle me-2"></i>My Account
                    </h6>
                </div>
                <div class="list-group list-group-flush">
                    <a asp-controller="Account" asp-action="Profile" class="list-group-item list-group-item-action">
                        <i class="bi bi-person me-2"></i>Profile
                    </a>
                    <a asp-controller="Account" asp-action="Orders" class="list-group-item list-group-item-action">
                        <i class="bi bi-bag me-2"></i>My Orders
                    </a>
                    <a asp-controller="Account" asp-action="Wishlist" class="list-group-item list-group-item-action">
                        <i class="bi bi-heart me-2"></i>Wishlist
                    </a>
                    <a asp-controller="Account" asp-action="Addresses" class="list-group-item list-group-item-action active">
                        <i class="bi bi-geo-alt me-2"></i>Addresses
                        @if (Model.Addresses.Any())
                        {
                            <span class="badge bg-primary ms-auto">@Model.Addresses.Count</span>
                        }
                    </a>
                    <a asp-controller="Account" asp-action="Settings" class="list-group-item list-group-item-action">
                        <i class="bi bi-gear me-2"></i>Settings
                    </a>
                </div>
            </div>
        </div>

        <!-- Addresses Content -->
        <div class="col-lg-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-1">My Addresses</h2>
                    <p class="text-muted mb-0">Manage your delivery addresses for faster checkout</p>
                </div>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                    <i class="bi bi-plus-circle me-1"></i>Add New Address
                </button>
            </div>

            @if (Model.Addresses.Any())
            {
                <!-- Existing Addresses -->
                <div class="row g-4 mb-4">
                    @foreach (var address in Model.Addresses)
                    {
                        <div class="col-md-6">
                            <div class="card h-100 address-card @(address.IsDefault ? "border-primary" : "")">
                                @if (address.IsDefault)
                                {
                                    <div class="card-header bg-primary text-white py-2">
                                        <small><i class="bi bi-star-fill me-1"></i>Default Address</small>
                                    </div>
                                }
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <h6 class="card-title mb-0">@address.Title</h6>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <button class="dropdown-item edit-address-btn" 
                                                            data-address-id="@address.Id"
                                                            data-bs-toggle="modal" 
                                                            data-bs-target="#editAddressModal">
                                                        <i class="bi bi-pencil me-2"></i>Edit
                                                    </button>
                                                </li>
                                                @if (!address.IsDefault)
                                                {
                                                    <li>
                                                        <button class="dropdown-item set-default-btn" data-address-id="@address.Id">
                                                            <i class="bi bi-star me-2"></i>Set as Default
                                                        </button>
                                                    </li>
                                                }
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <button class="dropdown-item text-danger delete-address-btn" data-address-id="@address.Id">
                                                        <i class="bi bi-trash me-2"></i>Delete
                                                    </button>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                    
                                    <div class="address-details">
                                        <p class="mb-2">
                                            <strong>@address.FullName</strong>
                                            @if (!string.IsNullOrEmpty(address.Phone))
                                            {
                                                <br><small class="text-muted">@address.Phone</small>
                                            }
                                        </p>
                                        <p class="text-muted mb-0">
                                            @address.FormattedAddress
                                        </p>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <small class="text-muted">
                                        <i class="bi bi-calendar me-1"></i>Added @address.CreatedDate.ToShortDateString()
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- No Addresses -->
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-geo-alt display-1 text-muted"></i>
                    </div>
                    <h4 class="mb-3">No addresses added yet</h4>
                    <p class="text-muted mb-4">
                        Add your delivery addresses to make checkout faster and easier.
                    </p>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Your First Address
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form asp-action="AddAddress" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">
                        <i class="bi bi-plus-circle me-2"></i>Add New Address
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <!-- Address Title -->
                        <div class="col-12">
                            <label for="newTitle" class="form-label">Address Title <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="newTitle" name="Title" 
                                   placeholder="e.g., Home, Office, Parents' House" required>
                            <div class="form-text">Give this address a memorable name</div>
                        </div>
                        
                        <!-- Name Fields -->
                        <div class="col-md-6">
                            <label for="newFirstName" class="form-label">First Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="newFirstName" name="FirstName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="newLastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="newLastName" name="LastName" required>
                        </div>
                        
                        <!-- Address Lines -->
                        <div class="col-12">
                            <label for="newAddressLine1" class="form-label">Address Line 1 <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="newAddressLine1" name="AddressLine1" 
                                   placeholder="Street address, house number" required>
                        </div>
                        <div class="col-12">
                            <label for="newAddressLine2" class="form-label">Address Line 2</label>
                            <input type="text" class="form-control" id="newAddressLine2" name="AddressLine2" 
                                   placeholder="Apartment, suite, unit, building, floor, etc.">
                        </div>
                        
                        <!-- Location Fields -->
                        <div class="col-md-6">
                            <label for="newCity" class="form-label">City <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="newCity" name="City" required>
                        </div>
                        <div class="col-md-6">
                            <label for="newState" class="form-label">State/Province <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="newState" name="State" required>
                        </div>
                        <div class="col-md-6">
                            <label for="newPostalCode" class="form-label">Postal Code <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="newPostalCode" name="PostalCode" required>
                        </div>
                        <div class="col-md-6">
                            <label for="newCountry" class="form-label">Country <span class="text-danger">*</span></label>
                            <select class="form-select" id="newCountry" name="Country" required>
                                <option value="">Select Country</option>
                                <option value="US">United States</option>
                                <option value="CA">Canada</option>
                                <option value="GB">United Kingdom</option>
                                <option value="FR">France</option>
                                <option value="DE">Germany</option>
                                <option value="IT">Italy</option>
                                <option value="ES">Spain</option>
                                <option value="TR">Turkey</option>
                                <!-- Add more countries as needed -->
                            </select>
                        </div>
                        
                        <!-- Phone -->
                        <div class="col-12">
                            <label for="newPhone" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="newPhone" name="Phone" 
                                   placeholder="+1 (555) 123-4567">
                        </div>
                        
                        <!-- Default Address -->
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="newIsDefault" name="IsDefault">
                                <label class="form-check-label" for="newIsDefault">
                                    Set as default address
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-circle me-1"></i>Save Address
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">
                    <i class="bi bi-pencil me-2"></i>Edit Address
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- This would be populated via JavaScript when editing -->
                <p class="text-center text-muted">
                    <i class="bi bi-tools"></i>
                    Address editing functionality would be implemented here
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary">
                    <i class="bi bi-check-circle me-1"></i>Update Address
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .address-card {
            transition: all 0.3s ease;
        }
        
        .address-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .address-card.border-primary {
            box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.1);
        }
        
        .address-details p {
            line-height: 1.5;
        }
        
        .form-label {
            font-weight: 500;
            color: #495057;
        }
        
        .form-text {
            font-size: 0.875rem;
        }
        
        /* Modal Responsiveness */
        @@media (max-width: 768px) {
            .modal-lg {
                max-width: 95%;
                margin: 1rem auto;
            }
            
            .container {
                padding-left: 1rem;
                padding-right: 1rem;
            }
            
            .col-lg-3 {
                margin-bottom: 2rem;
            }
        }
        
        @@media (max-width: 576px) {
            .modal-body .row.g-3 {
                --bs-gutter-x: 1rem;
            }
            
            .d-flex.justify-content-between {
                flex-direction: column;
                gap: 1rem;
            }
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Set as default address
            $('.set-default-btn').on('click', function() {
                const addressId = $(this).data('address-id');
                
                if (confirm('Set this address as your default delivery address?')) {
                    // TODO: Implement set default address functionality
                    showToast('Default address updated successfully!', 'success');
                    setTimeout(function() {
                        location.reload();
                    }, 1000);
                }
            });
            
            // Delete address
            $('.delete-address-btn').on('click', function() {
                const addressId = $(this).data('address-id');
                const addressCard = $(this).closest('.address-card').parent();
                
                if (confirm('Are you sure you want to delete this address? This action cannot be undone.')) {
                    // TODO: Implement delete address functionality
                    addressCard.fadeOut(300, function() {
                        $(this).remove();
                        checkEmptyState();
                    });
                    showToast('Address deleted successfully!', 'success');
                }
            });
            
            // Edit address
            $('.edit-address-btn').on('click', function() {
                const addressId = $(this).data('address-id');
                // TODO: Load address data and populate edit modal
                console.log('Edit address:', addressId);
            });
            
            // Form validation
            $('form').on('submit', function(e) {
                const form = this;
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                form.classList.add('was-validated');
            });
            
            // Phone number formatting
            $('#newPhone').on('input', function() {
                let value = this.value.replace(/\D/g, '');
                if (value.length >= 10) {
                    value = value.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
                }
                this.value = value;
            });
            
            // Auto-fill country based on postal code patterns
            $('#newPostalCode').on('blur', function() {
                const postalCode = this.value.trim();
                const countrySelect = $('#newCountry');
                
                if (postalCode && !countrySelect.val()) {
                    // US: 5 digits or 5+4 format
                    if (/^\d{5}(-\d{4})?$/.test(postalCode)) {
                        countrySelect.val('US');
                    }
                    // Canada: Letter-Digit-Letter Digit-Letter-Digit
                    else if (/^[A-Za-z]\d[A-Za-z] \d[A-Za-z]\d$/.test(postalCode)) {
                        countrySelect.val('CA');
                    }
                    // UK: Various formats
                    else if (/^[A-Za-z]{1,2}\d[A-Za-z\d]? \d[A-Za-z]{2}$/.test(postalCode)) {
                        countrySelect.val('GB');
                    }
                }
            });
        });
        
        function checkEmptyState() {
            if ($('.address-card').length === 0) {
                setTimeout(function() {
                    location.reload();
                }, 500);
            }
        }
        
        // Toast notification function
        function showToast(message, type = 'info') {
            const toastHtml = `
                <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;
            
            if (!$('#toastContainer').length) {
                $('body').append('<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1060;"></div>');
            }
            
            const $toast = $(toastHtml);
            $('#toastContainer').append($toast);
            
            const bsToast = new bootstrap.Toast($toast[0]);
            bsToast.show();
            
            $toast.on('hidden.bs.toast', function() {
                $(this).remove();
            });
        }
    </script>
}
