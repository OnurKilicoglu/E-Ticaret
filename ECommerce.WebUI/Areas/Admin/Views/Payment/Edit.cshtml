@model PaymentEditViewModel
@{
    ViewData["Title"] = "Edit Payment";
}

<!-- Page Header -->
<div class="row mb-4">
    <div class="col-md-8">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a asp-area="Admin" asp-controller="Dashboard" asp-action="Index">Dashboard</a>
                </li>
                <li class="breadcrumb-item">
                    <a asp-action="Index">Payments</a>
                </li>
                <li class="breadcrumb-item">
                    <a asp-action="Details" asp-route-id="@Model.Id">Payment #@Model.Id</a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Edit</li>
            </ol>
        </nav>
        <h2 class="mb-0">
            <i class="bi bi-pencil text-warning"></i>
            Edit Payment #@Model.Id
        </h2>
        <p class="text-muted">Modify payment transaction details</p>
    </div>
    <div class="col-md-4 text-end">
        <div class="btn-group" role="group">
            <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-outline-info">
                <i class="bi bi-eye"></i>
                View Details
            </a>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i>
                Back to List
            </a>
        </div>
    </div>
</div>

<!-- Alert Messages -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Payment Form -->
<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-credit-card text-primary"></i>
                    Payment Information
                </h5>
            </div>
            <div class="card-body">
                <form asp-action="Edit" asp-route-id="@Model.Id" method="post" id="paymentEditForm">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>
                    
                    <input asp-for="Id" type="hidden" />
                    <input asp-for="CreatedDate" type="hidden" />
                    
                    <div class="row">
                        <!-- Order Information (Read-only) -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="OrderId" class="form-label">Order</label>
                            <select asp-for="OrderId" class="form-select" asp-items="Model.OrderOptions" required>
                            </select>
                            <span asp-validation-for="OrderId" class="text-danger"></span>
                            <div class="mt-2">
                                <div class="card card-body bg-light p-2">
                                    <small class="text-muted">
                                        <strong>@Model.OrderNumber</strong><br>
                                        Customer: @Model.UserName (@Model.UserEmail)<br>
                                        Order Total: @Model.OrderTotal.ToString("C")
                                    </small>
                                </div>
                            </div>
                        </div>

                        <!-- Payment Method -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="PaymentMethod" class="form-label required">Payment Method</label>
                            <select asp-for="PaymentMethod" class="form-select" asp-items="Model.PaymentMethodOptions" required>
                            </select>
                            <span asp-validation-for="PaymentMethod" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Amount -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="Amount" class="form-label required">Amount</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input asp-for="Amount" class="form-control" type="number" step="0.01" min="0" required>
                                <span asp-validation-for="Amount" class="text-danger"></span>
                            </div>
                            <div class="form-text">
                                Original amount: @Model.Amount.ToString("C")
                            </div>
                        </div>

                        <!-- Payment Status -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="PaymentStatus" class="form-label">Payment Status</label>
                            <select asp-for="PaymentStatus" class="form-select" asp-items="Model.PaymentStatusOptions">
                            </select>
                            <span asp-validation-for="PaymentStatus" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Transaction ID -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="TransactionId" class="form-label">Transaction ID</label>
                            <input asp-for="TransactionId" class="form-control" placeholder="External transaction reference">
                            <span asp-validation-for="TransactionId" class="text-danger"></span>
                        </div>

                        <!-- Payment Gateway -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="PaymentGateway" class="form-label">Payment Gateway</label>
                            <input asp-for="PaymentGateway" class="form-control" placeholder="e.g., Stripe, PayPal, Bank">
                            <span asp-validation-for="PaymentGateway" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Payment Date -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="PaymentDate" class="form-label">Payment Date</label>
                            <input asp-for="PaymentDate" class="form-control" type="datetime-local" 
                                   value="@Model.PaymentDate.ToString("yyyy-MM-ddTHH:mm")">
                            <span asp-validation-for="PaymentDate" class="text-danger"></span>
                        </div>

                        <!-- Processed Date -->
                        <div class="col-md-6 mb-3">
                            <label asp-for="ProcessedDate" class="form-label">Processed Date</label>
                            <input asp-for="ProcessedDate" class="form-control" type="datetime-local" 
                                   value="@(Model.ProcessedDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")"
                                   placeholder="Leave empty if not processed">
                            <span asp-validation-for="ProcessedDate" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Payment Details -->
                    <div class="mb-3">
                        <label asp-for="PaymentDetails" class="form-label">Payment Details</label>
                        <textarea asp-for="PaymentDetails" class="form-control" rows="3" 
                                  placeholder="Additional payment information, notes, or references..."></textarea>
                        <span asp-validation-for="PaymentDetails" class="text-danger"></span>
                        <div class="form-text">
                            <span id="detailsCount">@(Model.PaymentDetails?.Length ?? 0)</span>/500 characters
                        </div>
                    </div>

                    <!-- Failure Reason (shown only if status is Failed) -->
                    <div class="mb-3" id="failureReasonSection" style="display: @(Model.PaymentStatus == PaymentStatus.Failed ? "block" : "none")">
                        <label asp-for="FailureReason" class="form-label">Failure Reason</label>
                        <textarea asp-for="FailureReason" class="form-control" rows="2" 
                                  placeholder="Explain why the payment failed..."></textarea>
                        <span asp-validation-for="FailureReason" class="text-danger"></span>
                    </div>

                    <!-- Form Actions -->
                    <div class="d-flex justify-content-between">
                        <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-outline-secondary">
                            <i class="bi bi-x-circle"></i>
                            Cancel
                        </a>
                        <div>
                            <button type="button" class="btn btn-outline-info me-2" id="validateBtn">
                                <i class="bi bi-check-circle"></i>
                                Validate
                            </button>
                            <button type="submit" class="btn btn-warning" id="submitBtn">
                                <i class="bi bi-save"></i>
                                Update Payment
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Information Panel -->
    <div class="col-lg-4">
        <!-- Payment History -->
        <div class="card mb-3">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-clock-history text-info"></i>
                    Payment History
                </h6>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <div class="timeline-item">
                        <div class="timeline-marker bg-success"></div>
                        <div class="timeline-content">
                            <h6 class="mb-1">Created</h6>
                            <p class="mb-0 small text-muted">@Model.CreatedDate.ToString("MMM dd, yyyy HH:mm")</p>
                        </div>
                    </div>
                    @if (Model.UpdatedDate.HasValue)
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker bg-warning"></div>
                            <div class="timeline-content">
                                <h6 class="mb-1">Last Updated</h6>
                                <p class="mb-0 small text-muted">@Model.UpdatedDate.Value.ToString("MMM dd, yyyy HH:mm")</p>
                            </div>
                        </div>
                    }
                    @if (Model.ProcessedDate.HasValue)
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker bg-info"></div>
                            <div class="timeline-content">
                                <h6 class="mb-1">Processed</h6>
                                <p class="mb-0 small text-muted">@Model.ProcessedDate.Value.ToString("MMM dd, yyyy HH:mm")</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Status Information -->
        <div class="card">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-info-circle text-info"></i>
                    Status Guide
                </h6>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex align-items-center mb-2">
                        <span class="badge bg-warning me-2">Pending</span>
                        <small>Payment awaiting processing</small>
                    </div>
                    <div class="d-flex align-items-center mb-2">
                        <span class="badge bg-success me-2">Completed</span>
                        <small>Payment successfully processed</small>
                    </div>
                    <div class="d-flex align-items-center mb-2">
                        <span class="badge bg-danger me-2">Failed</span>
                        <small>Payment processing failed</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-info me-2">Refunded</span>
                        <small>Payment has been refunded</small>
                    </div>
                </div>
                <div class="alert alert-warning">
                    <small>
                        <i class="bi bi-exclamation-triangle"></i>
                        Changing status may affect order processing
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        $(document).ready(function() {
            const paymentStatusSelect = $('select[name="PaymentStatus"]');
            const failureReasonSection = $('#failureReasonSection');
            const detailsTextarea = $('textarea[name="PaymentDetails"]');
            const detailsCount = $('#detailsCount');
            const validateBtn = $('#validateBtn');

            // Payment status change handler
            paymentStatusSelect.on('change', function() {
                const status = $(this).val();
                if (status == '@((int)PaymentStatus.Failed)') {
                    failureReasonSection.show();
                } else {
                    failureReasonSection.hide();
                    $('textarea[name="FailureReason"]').val('');
                }
            });

            // Character counter for payment details
            detailsTextarea.on('input', function() {
                const length = $(this).val().length;
                detailsCount.text(length);
                
                if (length > 500) {
                    detailsCount.addClass('text-danger');
                } else if (length > 400) {
                    detailsCount.addClass('text-warning').removeClass('text-danger');
                } else {
                    detailsCount.removeClass('text-danger text-warning');
                }
            });

            // Validate button
            validateBtn.on('click', function() {
                validateForm();
            });

            // Form validation
            function validateForm() {
                let isValid = true;
                let errors = [];

                // Check required fields
                if (!$('select[name="OrderId"]').val()) {
                    errors.push('Order is required');
                    isValid = false;
                }

                if (!$('select[name="PaymentMethod"]').val()) {
                    errors.push('Payment method is required');
                    isValid = false;
                }

                if (!$('input[name="Amount"]').val() || parseFloat($('input[name="Amount"]').val()) <= 0) {
                    errors.push('Valid amount is required');
                    isValid = false;
                }

                if (detailsTextarea.val().length > 500) {
                    errors.push('Payment details cannot exceed 500 characters');
                    isValid = false;
                }

                // Check failure reason if status is Failed
                if (paymentStatusSelect.val() == '@((int)PaymentStatus.Failed)') {
                    const failureReason = $('textarea[name="FailureReason"]').val();
                    if (!failureReason || failureReason.trim() === '') {
                        errors.push('Failure reason is required when status is Failed');
                        isValid = false;
                    }
                }

                if (isValid) {
                    showSuccess('Form validation passed');
                } else {
                    showError('Validation errors: ' + errors.join(', '));
                }

                return isValid;
            }

            // Form submit validation
            $('#paymentEditForm').on('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
            });

            // Helper functions
            function showSuccess(message) {
                showAlert(message, 'success');
            }

            function showError(message) {
                showAlert(message, 'danger');
            }

            function showAlert(message, type) {
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        <i class="bi bi-${type === 'success' ? 'check-circle' : 'x-circle'}-fill"></i>
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;
                
                // Remove existing alerts
                $('.alert').remove();
                
                // Add new alert
                $('.card-body').prepend(alertHtml);
                
                // Auto-dismiss after 5 seconds
                setTimeout(function() {
                    $('.alert').alert('close');
                }, 5000);
            }

            // Initialize character counter
            detailsTextarea.trigger('input');
        });
    </script>

    <style>
        .required::after {
            content: " *";
            color: #dc3545;
        }
        
        .card-body.bg-light {
            background-color: #f8f9fa !important;
        }
        
        .timeline {
            position: relative;
            padding-left: 30px;
        }
        
        .timeline::before {
            content: '';
            position: absolute;
            left: 10px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #dee2e6;
        }
        
        .timeline-item {
            position: relative;
            margin-bottom: 20px;
        }
        
        .timeline-marker {
            position: absolute;
            left: -25px;
            top: 5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid #fff;
            box-shadow: 0 0 0 2px #dee2e6;
        }
        
        .timeline-content h6 {
            font-size: 0.9rem;
            font-weight: 600;
        }
        
        .form-text {
            font-size: 0.875rem;
        }
        
        .alert {
            margin-bottom: 1rem;
        }
        
        .badge {
            font-size: 0.75rem;
        }
    </style>
}

